* Cljv


* Rationale

** What
*** Compiler that compiles (a subset of?) Clojure to Java

** Why?
*** TODO motivation
*** Some Clojure semantics can map to Java
*** Might be best way to run Clojure on Android

** How?
*** Compiler written in Clojure, generates readable Java
*** Use Google libraries for implementation support?
**** Guava
**** Cofoja?
*** Macros written in Clojure proper, run by the compiler
*** No eval
*** Any runtime support written completely in itself
**** make deftype and protocols work early
*** STM written in CLJV?

** Non-objectives
*** complete Clojure
**** feel free to subset, especially at first
**** but try to make anything present in both work identically
*** compiling e.g. core.clj as-is
**** don't want to touch Clojure itself for this
**** bootstrap will differ anyway

** Ancillary benefits
*** Analysis component of compiler might serve Clojure-in-Clojure, or other tooling
**** maybe - we'll need the same level of analysis support (maybe more) as in Clojure


* Implementation
** Primitives
*** TODO def
*** TODO fn*
**** TODO basics
**** TODO recur
**** TODO variable arity
**** TODO arity overloading
**** TODO closures
**** TODO variable arity

*** TODO if
**** need to match Clojure semantics (nil/false)
***** must deal with undefined (group with nil/false?)
*** TODO let*
*** TODO do
**** as with Java, not an expression
**** doFn(...) -> returns last arg
***** must alloc array for arguments?
*** TODO global
**** use 'var for this?
***** already Clojure special op
***** but wrong semantics, (var x) is *ns*-relative
***** no true unqualified globals in Clojure
*** TODO recur
**** TODO to loop
**** TODO to fn head
***** can't do in single pass
*** TODO invoke
*** TODO macros
*** TODO ns
*** TODO deftype*
**** maps to prototype/contructor combo
**** deftype macro is deftype* + extend-type
***** extend-type with ::fields meta on param vectors
*** TODO reify*
**** yes, for one-off protocol impls
**** no ctor created, just put impls on object
***** can share code with putting impls on prototype?
*** TODO defprotocol*
*** TODO extend-type
*** TODO defrecord?
*** TODO new
*** TODO dot
*** TODO set! (assign)
*** TODO name munging
**** special chars
**** java reserved words
*** TODO (java* code-string)?
**** probably no
*** TODO exceptions
**** TODO throw
**** TODO try
**** TODO catch
**** TODO finally
*** TODO quote?
*** TODO Evaluated collections
**** TODO Map
**** TODO Vector
*** TODO vars?
*** TODO case?
*** TODO callable non-function types?
**** how would Clojure feel without callable collections and keywords?


** Translation
| Op                               | JS                                 | Notes                                     | Questions                                            |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (def x 42)                       | cljs.my.ns['x'] = 42               | Following gclosure module system          | No vars? Compilation-time representation of ns?      |
|                                  | cljs.my.ns.x = 42                  | only this one will get minified           | but this precludes special chars in names            |
|                                  |                                    |                                           | def returns var in Clojure, no var here              |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (fn [x y] ...)                   | (function (x, y) {...})            | never do named function, use anon + def   | Use for closures too?                                |
| (fn [x y] ... (recur...)         |                                    | rewrite as fn + nested loop               | require analysis to transmit recur fact up           |
|                                  |                                    |                                           | rewrite when?                                        |
|                                  |                                    | block always in return context            | access to this for methods?                          |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (if test then else)              | (test ? then : else)               |                                           |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (do e1 e2 e3)                    | cljs.dofn(e1,e2,e3)                | dofn returns last arg, allocs array?      | requires js bootstrap file?                          |
|                                  |                                    | no, forces all to be exprs                | no fn needed when not expr context                   |
|                                  | (function () {e1;e2;return e3;})() |                                           |                                                      |
|                                  |                                    | expr context becomes return except when   |                                                      |
|                                  |                                    | single expr                               |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (let [x 1 y 2] ...)              | (function [x,y] {...})(1, 2)       | need to create nested functions for let*  | how to detect ref to earlier?                        |
|                                  | var x__42 = 1;var y__43 = 2; ...   | var numbering                             | statement/expr dichotomy if inline?                  |
|                                  | (function []                       | could wrap in no-arg function always      | needed for expr anyhow                               |
|                                  | {var x = 1; var y = 2; ...})()     | if always wrapped, don't need numbers?    | can we do var x = 42; var x = 43?                    |
|                                  |                                    | might still when nested                   | yes, but not var x = 42 ...nesting... var x = x      |
|                                  |                                    |                                           |                                                      |
|                                  |                                    | expr always becomes return context        |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (. x y)                          | x.y or x.y()?                      | no type info to distinguish               | bigger problem, both calling and retrieving          |
|                                  |                                    |                                           | fn in slot are viable, Clojure says method wins      |
| (. x y ...)                      | x.y(...)                           |                                           |                                                      |
|                                  |                                    |                                           |                                                      |
| (: x y)  ?                       | x.y                                |                                           | make all calls, add special field accessor           |
| x.y                              | x.y                                | . not used for classes in JS              | so not global, but scoped?                           |
|                                  |                                    | can't test from Clojure                   | but would want resolution of first segment to locals |
|                                  |                                    |                                           | what do macros use?                                  |
|                                  |                                    |                                           |                                                      |
| (. x (y))                        | already defined for this case      | wasn't going to carry this into cljs, but | no arg == field, penalize no-arg methods?            |
| ((. x y))                        | more correct, it's a slot          |                                           | rationale, it's not a method, just a slot,           |
| (-> (. x y) ())                  | doesn't currently work, could      |                                           | but then why do the arg-taking ones work?            |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (set! (. x y) 42)                | x.y = 42                           |                                           | whither vars and binding??                           |
| (set! some.global.x 42)          | some.global.x = 42                 |                                           |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (loop [bindings]                 | while(true){                       |                                           | wrap in function? depends on context                 |
| ... (recur))                     | ... rebind-continue                |                                           |                                                      |
|                                  | ret=xxx;break;}                    |                                           |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (deftype Foo [a b c])            | my.ns.Foo = function(a,b,c)        | turn inline defs into explicit extends?   | deftype inline methods split out arities             |
|                                  | {this.a = a;...this.c=c;}          | can't access this and fields.             |                                                      |
|                                  |                                    | in locals map, bind a to this.a etc       |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (new Foo 1 2 3)                  | (new Foo(1,2,3))                   |                                           |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (defprotocol P                   | my.ns.foo = function(obj args)     |                                           | How to extend built-ins, default, nil, undefined     |
| (foo [args]))                    | {obj['my.ns.foo'](obj, args);}     | can't minify                              |                                                      |
|                                  |                                    |                                           |                                                      |
|                                  | obj.my$ns$foo(obj, args)           |                                           |                                                      |
|                                  | P.ns = 'my.ns'                     | this only compile-time need, but compiler |                                                      |
|                                  |                                    | not in js world, can't see it             |                                                      |
|                                  |                                    | Require fully qualified protocol names?   |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (extend Foo my.ns.P              | for each fn in map:                | if no reified protocols, extend can't be  | or use Object.defineProperty to add method to        |
| {:foo (fn [foo]...)}             | Foo.prototype['my.ns.foo'] = fn    | a function, unless protocol quoted        | prototype? can then set enumerable to false          |
|                                  | Foo.prototype.my$ns$foo = fn       | or string                                 |                                                      |
|                                  |                                    | if extend is a macro or special, could    |                                                      |
|                                  |                                    | still evaluate fn map, but then can't be  |                                                      |
|                                  |                                    | minified                                  |                                                      |
|                                  |                                    | evaluated extend requires maps, keywords  |                                                      |
|                                  |                                    | high bar for bootstrap if protocols       |                                                      |
|                                  |                                    | at bottom - extend* unevaluated?          |                                                      |
|                                  |                                    | make extend-type primitive instead? YES   |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| constants                        |                                    |                                           |                                                      |
| nil                              | null                               |                                           |                                                      |
| "foo", true, false, 42.0         | same                               |                                           |                                                      |
| 42                               | goog.Long?                         |                                           |                                                      |
| 'foo                             | symbol ctor                        |                                           |                                                      |
| :foo                             | ?                                  |                                           | how to do keyword interning?                         |
|                                  |                                    |                                           | don't want intern every reference                    |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|
| (ns my.ns                        |                                    |                                           |                                                      |
| (:require [foo.bar :as fb]...)   |                                    |                                           |                                                      |
| (:macros [my.macros :as mm]...)) | :require-macros?                   |                                           |                                                      |
|----------------------------------+------------------------------------+-------------------------------------------+------------------------------------------------------|


** Library
*** TODO persistent data structures?
**** make base literals create Java base types?
**** promote only on conj?
**** take a subset from Clojure for small runtime footprint?
**** implemented in cljv?
**** Something else? 


** Questions
*** equality and hashing
*** vars
**** def should create fields in class?
**** what var semantics matter?
*** keywords and symbols
**** make separate object types?
***** not many symbols make it into runtime use, but keywords do
**** need to make sure {:key val} and (:key obj) are fast
*** metadata
*** namespaces
**** tie into Java packages?
*** eval
**** Maybe not
**** Beanshell?  ick
*** laziness
*** Immutability
**** enforced?
*** Interactive development
**** REPL
***** Beanshell?


* Namespaces and macros
** Macro problem?
*** syntax quote in the reader uses Clojure namespaces
*** hardwired to Compiler.currentNS().getMapping() Compiler.resolveSymbol(), isSpecial() etc
*** ::keyword resolution uses Compiler.currentNS(), namespaceFor()
*** if it expands to calls to other macros, those need to be in clojure-land
**** maybe - they need to be the cljs-compatible versions
***** argument for calling core clojure.core in cljs too?
****** but we can't have 2 clojure.core namespaces during compilation
***** translate/consider clojure.core/xxx => cljs.core/xxx during cljs compilation?
****** doesn't work if we have separate cljs.macros
******* some core things will be in cljs.core, some in cljs.macros
******* put core macros on cljs/core.clj
******* other core code in cljs/core.cljs
******* both contain ns declarations - ok?
*** but expansions destined for cljs compilation need to be resolved in cljs-land
**** dummy vars in dummy namespaces?
***** no - doesn't cover external nses, cljs aliases
***** just fully qualify everything non-core in macroexpansions
**** different specials set a problem
***** e.g. global, ns, defprotocol* not specials
****** could use var for global
****** could make ns a special?
******* probably not
******* but what macro would emit that?
***** install all cljs specials in dummy nses?
****** no, doesn't help macros file

** Want some equivalent of refer clojure.core
*** else practically everything will be qualified
**** e.g. core/defn - ick
*** but fewer things brought in by default?
**** requires selectivity control, or just a smaller core.cljs?
*** this is equivalent to a 'use', which we otherwise aren't supporting
**** unfair or don't care?

** Some core things defined in Java
*** where we don't want to otherwise expose things needed for their impl
**** e.g. ==, ===, math ops, instanceOf typeof etc
*** how to reserve names?
**** declare in core.cljv?
** Are we doing forward reference detection here?
*** requires listing of contents of current ns
**** like namespaces
** Macros written in separate Clojure files
*** Clojure code, in regular namespaces
*** Means core split into core.cljv, and core-macros.clj
**** both need to be auto-referred
** Compilation needs
*** current ns
**** *cljv-ns* ?
**** is this a Clojure ns?
***** not a fit
****** map is sym->Var or Class
****** aliases are sym->Namespace
*** ns has:
**** *cljv-namespaces* - {name->ns}
**** {:name "my.ns" :defs {sym qualified.sym} :deps {alias Namepsace-or-qualified.sym}}
**** defs
***** just set of names? no map
***** or map to fully qualified self?
**** deps
***** can't merge macros and cljs ns in deps
****** same ns might map to both
******* i.e. cljs.core will
***** aliases
****** sym->fully-qualified-sym
****** is this a separate mapping vs macros and requires?
******* if not, fn alias can mask out ns alias
******* that can't happen in Clojure
***** macro nses
****** map of sym->Namespaces?
******* require an alias?
******* (:macros {mm my.macros, ym your.macros})
****** aliases for these same as others?
***** required libs must have aliases too?
****** (:require [goog.math.Long :as gml])
****** or new (:require {gml goog.math.Long})
*** lookup 'foo - no ns, no dots
**** if special - done
**** if local - done
**** if found in cljs.macros Namespace, the macro cljs.macros/foo
**** if found in cljs.core ns, cljs.core.foo
**** whatever 'foo maps to in (-> env :ns :requires)
**** no use of deps
*** lookup 'foo.bar.baz - no ns, dot(s)
**** if foo is a local, foo_nnnn.bar.baz
**** if foo has a mapping in (:ns env) - that.mapping.bar.baz - no
***** really? covered by alias/whatever
****** more idiomatic for goog.stuff than goog.stuff/foo
****** but no :as there
***** leave out for now
**** else foo.bar.baz
*** lookup 'foo/bar - ns with no dots
**** get what 'foo maps to in (:ns env) deps
***** if nothing - error "no alias foo"
**** if maps to Namespace, the macro 'bar in that ns
**** else a symbol, e.g. 'fred.ethel => fred.ethel.bar
*** lookup fully.qualified/foo - ns with dots
**** would only use this if local shadowed (and no alias)?
**** what doesn't have alias?
***** cljs.core, cljs.macros
***** could use cljs.core.foo for former
***** always interpret as macro ns?
****** or check deps vals for Namespace, else not
***** if Namespace, the macro foo in Namespace
***** fully.quallified.foo
**** everything might have alias, but macros/syntax-quote need to emit full expansions
*** how to refer to true globals?
**** e.g. Object, String, java.lang
**** (var Name)?
***** that doesn't match Clojure, where (var x) means 'whatever x means in current ns'
***** there are no unqualified globals in Clojure


* Setup
** TBD


* Prior art
** Mirah is a nice place to look at compilation.
*** Does it attempt "readability"?

